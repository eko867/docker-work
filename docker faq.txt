иметь возможность быстро развернуть проект на любой машине
(за счет того, что подготавливается не сама машина=на машине все остается как есть, а имееются контейнеры со всеми кишками=окружением, требующимся для данного проекта)
(кому-то для проекта что-то понадобилось, он зафигачил это в еще один контейнер)(а другому это не надо, он просто не использует этот контейнер)

все что работает из-под контейнера работает изолированно от основных процессов, фс и стека конретной машины (двойная изоляция)(когда отработает контейнер это никак не затронет ос)
(докер-контейнер отдаленно сравним с виртуальной машиной, на которой стоит Linux Free BSD, гарантирующий индентичные настройки ОС)

(сам образ умный и многослойный, каждый слой как бы коммит, который можно откатить или убрать)(это лучше чем у Vagrant)
(причем написанная прога может дальше уехать на тест на сервер и гоняться там в этом же контейнере (т.е еще и гарантия одинаковой среды разработки и среды исполнения, разрабу не надо пилить прогу "под сервер")

Image / образ - read only    (п: тачка с различной комплектацией)
Образы хранятся в Regestries/реестрах (публичных и приватных) - предметы распространения образов (п: автосалон)
Сontainer - executable (создаются из образов, мб запущены, остановлены или удалены

Один контейнер - один сервис (php,mysql,nginx)

FROM name:tag //базовый image
RUN ...&& .../ ... / ...&& ... //промежуточный image

volumes: (символьная ссылка)
	директория на локальной машине(ваша папка проекта) : директория в образе(воообще посрать есть она сейчас на компе или нет)(монтируемая фс внутри контейнера)
	(то что есть в контейнере будет и у нас локально и наоброт)(так удобно хранить например, конфиг сервера, странички сайта, БД)
	(при удалении контейнера данные останутся в проекте, и затем при создании нового контейнера будут доступны для него)
ports:
	порт локальный : порт в образе

каждое определение сервиса-контейнера должно содержать либо image: , либо build:

